worker_processes  1;

error_log /tmp/logs/error.log;

events {
    worker_connections 1024;
}

http {


   log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';


    #lua 依赖
    lua_package_path "/usr/local/openresty/lualib/?.lua;;";
    lua_package_cpath "/usr/local/openresty/lualib/?.so;;";

    #init
    init_by_lua_file "/usr/local/openresty/lua/init.lua";

    #include mime.types;

    default_type text/html;

    #gzip
    #超时时间
    #日志格式
    #反向代理配置

    #存储upstream列表的共享词典
    lua_shared_dict upstream_list 10m;


    init_by_lua_block {
       print("I need no extra escaping here, for example: \r\nblah")
    }



    # nginx master 进程加载配置时启动,用于第一次初始化

    # nginx work 进程调度,使用ngx.timer.at定时拉去配置
    init_worker_by_lua_block {
        local dyna_upstreams = require "dyna_upstream";
        local handle = nil;
        handle = function()
            -- 控制每次只有一个worker 执行
            dyna_upstreams.update_upstreams();
            ngx.timer.at(5, handle);
        end
        ngx.timer.at(5,handle);

    }

    upstream item_work_tomcat {

        server 0.0.0.1; # 占位符
        balancer_by_lua_block {
            local balancer = require "ngx.balance"
            local dyna_upstream = require "dyna_upstreams";
            local upstreams = dyna_upstreams.get_upstreams();
            local ip_port = upstreams[math.random(1, table.getn(upstreams))]

            ngx.log(ngx.ERR, "current : ===========",
                math.random(1, table.getn(upstreams)))
            balancer.set_current_peer(ip_port.ip, ip_port.port)

        }
    }



    include "/usr/local/openresty/config/domain/*";

}

